{
  "version": 3,
  "sources": ["<stdin>", "../app/entry.server.tsx", "../app/root.tsx", "../app/routes/terminal.tsx", "../app/routes/index.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "import { PassThrough } from \"stream\";\nimport type { EntryContext } from \"@remix-run/node\";\nimport { Response } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport isbot from \"isbot\";\nimport { renderToPipeableStream } from \"react-dom/server\";\n\nconst ABORT_DELAY = 5000;\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return isbot(request.headers.get(\"user-agent\"))\n    ? handleBotRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      )\n    : handleBrowserRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      );\n}\n\nfunction handleBotRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return new Promise((resolve, reject) => {\n    let didError = false;\n\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer context={remixContext} url={request.url} />,\n      {\n        onAllReady() {\n          const body = new PassThrough();\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(body, {\n              headers: responseHeaders,\n              status: didError ? 500 : responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          didError = true;\n\n          console.error(error);\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n\nfunction handleBrowserRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return new Promise((resolve, reject) => {\n    let didError = false;\n\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer context={remixContext} url={request.url} />,\n      {\n        onShellReady() {\n          const body = new PassThrough();\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(body, {\n              headers: responseHeaders,\n              status: didError ? 500 : responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(err: unknown) {\n          reject(err);\n        },\n        onError(error: unknown) {\n          didError = true;\n\n          console.error(error);\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n", "import type { MetaFunction } from \"@remix-run/node\";\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from \"@remix-run/react\";\n\nexport const meta: MetaFunction = () => ({\n  charset: \"utf-8\",\n  title: \"New Remix App\",\n  viewport: \"width=device-width,initial-scale=1\",\n});\n\nexport default function App() {\n  return (\n    <html lang=\"en\">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n", "import { useState } from \"react\";\nimport styles from \"~/styles/terminal.css\";\nimport lexicalStyles from \"~/styles/terminal-lexical.css\";\nimport {\n  $createParagraphNode,\n  $createRangeSelection,\n  $createTextNode,\n  $getPreviousSelection,\n  $isRangeSelection,\n  $setSelection,\n  CLEAR_EDITOR_COMMAND,\n  CLICK_COMMAND,\n  COMMAND_PRIORITY_CRITICAL,\n  COMMAND_PRIORITY_EDITOR,\n  EditorConfig,\n  EditorState,\n  ElementNode,\n  KEY_ARROW_LEFT_COMMAND,\n  KEY_ARROW_RIGHT_COMMAND,\n  KEY_ENTER_COMMAND,\n  KEY_MODIFIER_COMMAND,\n  LexicalEditor,\n  MOVE_TO_START,\n  NodeKey,\n  ParagraphNode,\n  RangeSelection,\n  SELECTION_CHANGE_COMMAND,\n  SerializedTextNode,\n  Spread,\n  TextNode,\n} from \"lexical\";\n\nimport { $getRoot, $getSelection } from \"lexical\";\nimport { useEffect } from \"react\";\n\nimport { LexicalComposer } from \"@lexical/react/LexicalComposer\";\nimport { PlainTextPlugin } from \"@lexical/react/LexicalPlainTextPlugin\";\nimport { ContentEditable } from \"@lexical/react/LexicalContentEditable\";\nimport { HistoryPlugin } from \"@lexical/react/LexicalHistoryPlugin\";\nimport { OnChangePlugin } from \"@lexical/react/LexicalOnChangePlugin\";\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\";\n\nexport function links() {\n  return [\n    { rel: \"preconnect\", href: \"https://fonts.googleapis.com\" },\n    {\n      rel: \"preconnect\",\n      href: \"https://fonts.gstatic.com\",\n      crossOrigin: \"true\",\n    },\n    {\n      rel: \"stylesheet\",\n      href: \"https://fonts.googleapis.com/css2?family=Cousine&display=swap\",\n    },\n    { rel: \"stylesheet\", href: styles },\n    { rel: \"stylesheet\", href: lexicalStyles },\n  ];\n}\n\nconst DEFAULT_START = \"~ $ \";\n\nexport default function Index() {\n  const [userInput, setUserInput] = useState(DEFAULT_START);\n  const [cursorPosition, setCursorPosition] = useState(userInput.length);\n\n  const initialConfig = {\n    namespace: \"MyEditor\",\n    theme: {\n      base: \"terminal-base\",\n    },\n    onError: (e: Error) => console.error(e),\n    editorState: () => {\n      const paragraph = $createParagraphNode();\n      paragraph.append(new TerminalPrefixNode());\n      $getRoot().append(paragraph);\n      $getRoot().selectEnd();\n    },\n    nodes: [TerminalPrefixNode],\n    editable: true,\n  };\n\n  return (\n    <div id=\"term-container\">\n      <div id=\"term-border\">\n        <div id=\"term-header\">\n          <div id=\"term-header-red\"></div>\n          <div id=\"term-header-yellow\"></div>\n          <div id=\"term-header-green\"></div>\n        </div>\n        <div id=\"term-body\">\n          {/*<input\n            id=\"term-body-current-input\"\n            onChange={(e) => {\n              let newInput = e.target.value;\n              console.log(newInput);\n              if (newInput.length < DEFAULT_START.length) {\n                newInput = DEFAULT_START;\n              }\n              setUserInput(newInput);\n            }}\n            value={userInput + \"\\u2588\"}\n          />*/}\n          <LexicalComposer initialConfig={initialConfig}>\n            <PlainTextPlugin\n              contentEditable={\n                <ContentEditable\n                  autoCorrect={false}\n                  // autoComplete={false}\n                  autoCapitalize={false}\n                  spellCheck={false}\n                  id=\"term-body-content-editable\"\n                />\n              }\n              placeholder=\"\"\n            />\n            <OnChangePlugin onChange={onChange} />\n            <HistoryPlugin />\n            <TransformPlugin />\n          </LexicalComposer>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction onChange(editorState: EditorState, editor: LexicalEditor) {\n  editorState.read(() => {\n    // Read the contents of the EditorState here.\n    const root = $getRoot();\n    const selection = $getSelection();\n\n    // console.log(selection);\n  });\n}\n\nfunction TransformPlugin(): null {\n  const [editor] = useLexicalComposerContext();\n\n  editor.registerNodeTransform(ParagraphNode, (paragraphNode) => {\n    const root = $getRoot();\n    const first = root.getFirstDescendant();\n    if (!(first instanceof TerminalPrefixNode)) {\n      if (\n        first == null ||\n        (first instanceof ParagraphNode && first.getChildrenSize() === 0)\n      ) {\n        paragraphNode.append(new TerminalPrefixNode());\n        paragraphNode.getParentOrThrow().selectEnd();\n      } else {\n        first.insertBefore(new TerminalPrefixNode());\n      }\n    }\n  });\n\n  editor.registerCommand<KeyboardEvent>(\n    KEY_ARROW_LEFT_COMMAND,\n    (event: KeyboardEvent, editor: LexicalEditor) => {\n      // If we're holding shift, we're highlighting\n      if (event.shiftKey) {\n        return false;\n      }\n\n      // If not RangeSelection, bail early\n      const selection = $getSelection();\n      if (!$isRangeSelection(selection)) {\n        return false;\n      }\n\n      // If any part of the selection contains TerminalPrefixNode\n      // set the cursor to the end of TerminalPrefixNode\n      const selectionNodes = selection.getNodes();\n      if (!selectionNodes.every((n) => !(n instanceof TerminalPrefixNode))) {\n        const root = $getRoot();\n        const terminalPrefix = root.getFirstDescendant() as TerminalPrefixNode;\n        const newSelection = $createRangeSelection();\n        newSelection.anchor.set(\n          terminalPrefix.getKey(),\n          terminalPrefix.getLength(),\n          \"text\"\n        );\n        newSelection.focus.set(\n          terminalPrefix.getKey(),\n          terminalPrefix.getLength(),\n          \"text\"\n        );\n        $setSelection(newSelection);\n        event.preventDefault();\n        return true;\n      }\n\n      return false;\n    },\n    COMMAND_PRIORITY_EDITOR\n  );\n\n  editor.registerCommand<KeyboardEvent>(\n    KEY_MODIFIER_COMMAND,\n    (event: KeyboardEvent, editor: LexicalEditor) => {\n      if (event.ctrlKey && event.key === \"c\") {\n        const paragraph = $createParagraphNode();\n        paragraph.append(new TerminalPrefixNode());\n        $getRoot().clear();\n        $getRoot().append(paragraph);\n        $getRoot().selectEnd();\n\n        event.preventDefault();\n        return true;\n      }\n      return false;\n    },\n    COMMAND_PRIORITY_EDITOR\n  );\n\n  editor.registerCommand<void>(\n    SELECTION_CHANGE_COMMAND,\n    (_event: void, _editor: LexicalEditor) => {\n      const selectionNodes = $getSelection()?.getNodes();\n      if (selectionNodes == null) {\n        return false;\n      }\n\n      const selection = $getSelection();\n      if (!$isRangeSelection(selection)) {\n        console.log(selection);\n        return false;\n      }\n\n      const offsets = selection.getCharacterOffsets();\n      const isPointSelection = offsets[0] === offsets[1];\n      if (selectionNodes.length === 1 && isPointSelection) {\n        const onlyNode = selectionNodes[0];\n        if (onlyNode instanceof TerminalPrefixNode) {\n          if (offsets[0] !== onlyNode.getLength()) {\n            console.log(selection.focus.offset, selection.anchor.offset);\n            // console.log(offsets);\n            const newSelection = $createRangeSelection();\n            newSelection.anchor.set(\n              onlyNode.getKey(),\n              onlyNode.getLength(),\n              \"text\"\n            );\n            newSelection.focus.set(\n              onlyNode.getKey(),\n              onlyNode.getLength(),\n              \"text\"\n            );\n            //$setSelection(newSelection);\n            return true;\n          }\n        }\n      }\n\n      return false;\n    },\n    COMMAND_PRIORITY_EDITOR\n  );\n\n  editor.registerCommand<KeyboardEvent>(\n    MOVE_TO_START,\n    (event: KeyboardEvent, editor: LexicalEditor) => {\n      const root = $getRoot();\n      const selection = $createRangeSelection();\n\n      const terminalPrefix = root.getFirstDescendant();\n      if (!(terminalPrefix instanceof TerminalPrefixNode)) {\n        return false;\n      }\n\n      selection.anchor.set(\n        terminalPrefix.getKey(),\n        terminalPrefix.getLength(),\n        \"text\"\n      );\n      selection.focus.set(\n        terminalPrefix.getKey(),\n        terminalPrefix.getLength(),\n        \"text\"\n      );\n      $setSelection(selection);\n\n      event.preventDefault();\n      return true;\n    },\n    COMMAND_PRIORITY_EDITOR\n  );\n\n  editor.registerCommand<KeyboardEvent>(\n    KEY_ENTER_COMMAND,\n    (event: KeyboardEvent, editor: LexicalEditor) => {\n      const paragraph = $createParagraphNode();\n      paragraph.append(new TerminalPrefixNode());\n      $getRoot().clear();\n      $getRoot().append(paragraph);\n      $getRoot().selectEnd();\n\n      event.preventDefault();\n      return true;\n    },\n    COMMAND_PRIORITY_EDITOR\n  );\n\n  return null;\n}\n\ntype SerializedTerminalPrefixNode = Spread<\n  {\n    type: \"terminal-prefix-node\";\n    version: number;\n  },\n  SerializedTextNode\n>;\n\nclass TerminalPrefixNode extends TextNode {\n  static getType(): string {\n    return \"terminal-prefix-node\";\n  }\n\n  static clone(node: TerminalPrefixNode): TerminalPrefixNode {\n    return new TerminalPrefixNode(node.__key);\n  }\n\n  constructor(key?: NodeKey) {\n    super(\"~ $ \", key);\n    this.__mode = 1;\n    this.__detail ^= 1 << 1;\n  }\n\n  getLength(): number {\n    return this.getTextContent().length;\n  }\n\n  createDOM(config: EditorConfig): HTMLElement {\n    return super.createDOM(config);\n  }\n\n  updateDOM(\n    prevNode: TerminalPrefixNode,\n    dom: HTMLElement,\n    config: EditorConfig\n  ): boolean {\n    return super.updateDOM(prevNode, dom, config);\n  }\n\n  static importJSON(\n    jsonNode: SerializedTerminalPrefixNode\n  ): TerminalPrefixNode {\n    const node = $createTerminalPrefixNode();\n    return node;\n  }\n\n  exportJSON(): SerializedTerminalPrefixNode {\n    return {\n      ...super.exportJSON(),\n      type: \"terminal-prefix-node\",\n      version: 1,\n    };\n  }\n}\n\nexport function $createTerminalPrefixNode(): TerminalPrefixNode {\n  return new TerminalPrefixNode();\n}\n", "export function links() {\n  return [\n    { rel: \"preconnect\", href: \"https://fonts.googleapis.com\" },\n    {\n      rel: \"preconnect\",\n      href: \"https://fonts.gstatic.com\",\n      crossOrigin: \"true\",\n    },\n    {\n      rel: \"stylesheet\",\n      href: \"https://fonts.googleapis.com/css2?family=Cousine&display=swap\",\n    },\n  ];\n}\n\nexport default function Index() {\n  return (\n    <div style={{ fontFamily: \"Cousine, monospace\", fontSize: \"16px\" }}>\n      brady@madden.dev\n    </div>\n  );\n}\n", "export default {'version':'3372b5e2','entry':{'module':'/build/entry.client-XCTU5YFA.js','imports':['/build/_shared/chunk-25EIO6HH.js','/build/_shared/chunk-S64AOWX5.js','/build/_shared/chunk-IE366Y5W.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-LHNHIV53.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/index':{'id':'routes/index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/index-PPU7WILL.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/terminal':{'id':'routes/terminal','parentId':'root','path':'terminal','index':undefined,'caseSensitive':undefined,'module':'/build/routes/terminal-3F5S6GCX.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false}},'url':'/build/manifest-3372B5E2.js'};", "\nimport * as entryServer from \"./entry.server.tsx\";\nimport * as route0 from \"./root.tsx\";\nimport * as route1 from \"./routes/terminal.tsx\";\nimport * as route2 from \"./routes/index.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"public/build\";\n  export const publicPath = \"/build/\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/terminal\": {\n      id: \"routes/terminal\",\n      parentId: \"root\",\n      path: \"terminal\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route2\n    }\n  };"],
  "mappings": "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",
  "names": ["isbot", "import_react", "import_react", "import_lexical", "editor", "Index", "links"]
}
